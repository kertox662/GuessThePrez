/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

<<<<<<< HEAD
synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:window1:623920:
  appc.background(230);
} //_CODE_:window1:623920:

public void button1_click1(GButton source, GEvent event) { //_CODE_:button1:839333:
  println("button1 - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:button1:839333:

public void button2_click1(GButton source, GEvent event) { //_CODE_:button2:777236:
  println("button2 - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:button2:777236:

//synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:window1:679824:
//  appc.background(230);
//} //_CODE_:window1:679824:

public void clickYes(GButton source, GEvent event) { //_CODE_:yesButton:682798:
  buttonPressed = 0; 
  respondToQuestion(); 
  println("yesButton - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:yesButton:682798:

public void clickNo(GButton source, GEvent event) { //_CODE_:noButton:464313:
  buttonPressed = 1; 
  println("noButton - GButton >> GEvent." + event + " @ " + millis());
=======
synchronized public void drawGuiWin(PApplet appc, GWinData data) { //_CODE_:guiWin:679824:
  appc.background(230);
} //_CODE_:guiWin:679824:

public void clickYes(GButton source, GEvent event) { //_CODE_:yesButton:682798:
  respondToQuestion(true);
  getNextQuestion();
} //_CODE_:yesButton:682798:

public void clickNo(GButton source, GEvent event) { //_CODE_:noButton:464313:
  respondToQuestion(false);
  getNextQuestion();
>>>>>>> 2d80aa71831f1882adb9b8a98c4f5a9f680e9f10
} //_CODE_:noButton:464313:

public void PreviousQuestion(GButton source, GEvent event) { //_CODE_:previousButton:565747:
  undoCandidates();
  getNextQuestion();
} //_CODE_:previousButton:565747:

public void toggleDisplayEffects(GCheckbox source, GEvent event) { //_CODE_:showEffectBox:597986:
  showSelected = showEffectBox.isSelected();
} //_CODE_:showEffectBox:597986:

public void selectMode(GDropList source, GEvent event) { //_CODE_:modeDropList:585678:
  curMode = source.getSelectedText();
  
} //_CODE_:modeDropList:585678:

public void clickReset(GButton source, GEvent event) { //_CODE_:ResetButton:688049:
  reset();
} //_CODE_:ResetButton:688049:

public void toggleAnimateTitle(GCheckbox source, GEvent event) { //_CODE_:animateTitleCheck:211146:
  playAnim = animateTitleCheck.isSelected();
} //_CODE_:animateTitleCheck:211146:

public void changeAnimSpeed(GSlider source, GEvent event) { //_CODE_:animSpeedSlider:955392:
  int divisor = source.getValueI();
  animSpeed = (divisor / 5);
} //_CODE_:animSpeedSlider:955392:


// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("Sketch Window");
<<<<<<< HEAD

  window1 = GWindow.getWindow(this, "Window title", 0, 0, 400, 300, JAVA2D);
  window1.noLoop();
  window1.addDrawHandler(this, "win_draw1");
  button1 = new GButton(window1, 241, 167, 80, 30);
  button1.setText("NO");
  button1.addEventHandler(this, "button1_click1");
  button2 = new GButton(window1, 78, 167, 80, 30);
  button2.setText("YES");
  button2.addEventHandler(this, "button2_click1");

  window1 = GWindow.getWindow(this, "Window title", 0, 0, 400, 240, JAVA2D);
  window1.noLoop();
  window1.addDrawHandler(this, "win_draw1");
  yesButton = new GButton(window1, 80, 95, 80, 30);
=======
  guiWin = GWindow.getWindow(this, "Guesser_Controls", 0, 0, 400, 400, JAVA2D);
  guiWin.noLoop();
  guiWin.addDrawHandler(this, "drawGuiWin");
  yesButton = new GButton(guiWin, 80, 50, 80, 30);
>>>>>>> 2d80aa71831f1882adb9b8a98c4f5a9f680e9f10
  yesButton.setText("Yes");
  yesButton.addEventHandler(this, "clickYes");
  noButton = new GButton(guiWin, 240, 50, 80, 30);
  noButton.setText("No");
  noButton.addEventHandler(this, "clickNo");
  previousButton = new GButton(guiWin, 80, 85, 120, 30);
  previousButton.setText("Correct Previous Answer");
  previousButton.addEventHandler(this, "PreviousQuestion");
  questionLabel = new GLabel(guiWin, 50, 5, 300, 40);
  questionLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  questionLabel.setText("Question:");
  questionLabel.setOpaque(false);
  showEffectBox = new GCheckbox(guiWin, 80, 125, 160, 20);
  showEffectBox.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  showEffectBox.setText("Show Effects of Answers?");
  showEffectBox.setOpaque(false);
  showEffectBox.addEventHandler(this, "toggleDisplayEffects");
  showEffectBox.setSelected(true);
  modeDropList = new GDropList(guiWin, 250, 125, 90, 57, 2);
  modeDropList.setItems(loadStrings("list_585678"), 0);
  modeDropList.addEventHandler(this, "selectMode");
<<<<<<< HEAD

  window1.loop();
=======
  ResetButton = new GButton(guiWin, 80, 150, 80, 30);
  ResetButton.setText("Restart");
  ResetButton.addEventHandler(this, "clickReset");
  animateTitleCheck = new GCheckbox(guiWin, 80, 220, 120, 20);
  animateTitleCheck.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  animateTitleCheck.setText("Animate Title?");
  animateTitleCheck.setOpaque(false);
  animateTitleCheck.addEventHandler(this, "toggleAnimateTitle");
  animateTitleCheck.setSelected(true);
  animSpeedSlider = new GSlider(guiWin, 79, 250, 100, 50, 10.0);
  animSpeedSlider.setShowValue(true);
  animSpeedSlider.setShowLimits(true);
  animSpeedSlider.setLimits(50, 0, 100);
  animSpeedSlider.setNbrTicks(11);
  animSpeedSlider.setStickToTicks(true);
  animSpeedSlider.setShowTicks(true);
  animSpeedSlider.setNumberFormat(G4P.INTEGER, 0);
  animSpeedSlider.setOpaque(false);
  animSpeedSlider.addEventHandler(this, "changeAnimSpeed");
  animationSpeedLabel = new GLabel(guiWin, 180, 265, 140, 20);
  animationSpeedLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  animationSpeedLabel.setText("Title Animation Speed");
  animationSpeedLabel.setOpaque(false);
  guiWin.loop();
>>>>>>> 2d80aa71831f1882adb9b8a98c4f5a9f680e9f10
}

// Variable declarations 
// autogenerated do not edit
<<<<<<< HEAD
GWindow window1;

GButton button1; 
GButton button2; 

=======
GWindow guiWin;
>>>>>>> 2d80aa71831f1882adb9b8a98c4f5a9f680e9f10
GButton yesButton; 
GButton noButton; 
GButton previousButton; 
GLabel questionLabel; 
GCheckbox showEffectBox; 
GDropList modeDropList; 
GButton ResetButton; 
GCheckbox animateTitleCheck; 
GSlider animSpeedSlider; 
GLabel animationSpeedLabel; 
