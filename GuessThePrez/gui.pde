/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:window1:679824:
  appc.background(230);
} //_CODE_:window1:679824:

public void clickYes(GButton source, GEvent event) { //_CODE_:yesButton:682798:
  println("yesButton - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:yesButton:682798:

public void clickNo(GButton source, GEvent event) { //_CODE_:noButton:464313:
  println("noButton - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:noButton:464313:

public void PreviousQuestion(GButton source, GEvent event) { //_CODE_:previousButton:565747:
  println("previousButton - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:previousButton:565747:

public void toggleDisplayEffects(GCheckbox source, GEvent event) { //_CODE_:showEffectBox:597986:
  println("showEffectBox - GCheckbox >> GEvent." + event + " @ " + millis());
} //_CODE_:showEffectBox:597986:

public void dropList1_click1(GDropList source, GEvent event) { //_CODE_:candidateOptions:301457:
  println("candidateOptions - GDropList >> GEvent." + event + " @ " + millis());
} //_CODE_:candidateOptions:301457:

public void selectMode(GDropList source, GEvent event) { //_CODE_:modeDropList:585678:
  println("modeDropList - GDropList >> GEvent." + event + " @ " + millis());
} //_CODE_:modeDropList:585678:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("Sketch Window");
  window1 = GWindow.getWindow(this, "Window title", 0, 0, 400, 240, JAVA2D);
  window1.noLoop();
  window1.addDrawHandler(this, "win_draw1");
  yesButton = new GButton(window1, 80, 95, 80, 30);
  yesButton.setText("Yes");
  yesButton.addEventHandler(this, "clickYes");
  noButton = new GButton(window1, 240, 95, 80, 30);
  noButton.setText("No");
  noButton.addEventHandler(this, "clickNo");
  previousButton = new GButton(window1, 80, 130, 120, 30);
  previousButton.setText("Correct Previous Answer");
  previousButton.addEventHandler(this, "PreviousQuestion");
  titleLabel = new GLabel(window1, 0, 10, 400, 40);
  titleLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  titleLabel.setText("GuessThePrez!");
  titleLabel.setTextBold();
  titleLabel.setOpaque(false);
  questionLabel = new GLabel(window1, 50, 50, 300, 40);
  questionLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  questionLabel.setText("Question:");
  questionLabel.setOpaque(false);
  showEffectBox = new GCheckbox(window1, 80, 165, 160, 20);
  showEffectBox.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  showEffectBox.setText("Show Effects of Answers?");
  showEffectBox.setOpaque(false);
  showEffectBox.addEventHandler(this, "toggleDisplayEffects");
  candidateOptions = new GDropList(window1, 250, 139, 90, 80, 3);
  candidateOptions.setItems(loadStrings("list_301457"), 0);
  candidateOptions.addEventHandler(this, "dropList1_click1");
  modeDropList = new GDropList(window1, 250, 165, 90, 76, 3);
  modeDropList.setItems(loadStrings("list_585678"), 0);
  modeDropList.addEventHandler(this, "selectMode");
  window1.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow window1;
GButton yesButton; 
GButton noButton; 
GButton previousButton; 
GLabel titleLabel; 
GLabel questionLabel; 
GCheckbox showEffectBox; 
GDropList candidateOptions; 
GDropList modeDropList; 
